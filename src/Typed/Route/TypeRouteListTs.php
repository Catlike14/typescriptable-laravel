<?php

namespace Kiwilan\Typescriptable\Typed\Route;

use Illuminate\Support\Collection;

class TypeRouteListTs
{
    /** @var Collection<string, TypeRoute> */
    protected Collection $routes;

    protected ?string $typescript = null;

    /**
     * @param  Collection<string, TypeRoute>  $routes
     */
    public static function make(Collection $routes): self
    {
        $self = new self();
        $self->routes = $routes;
        $self->typescript = $self->setTypescript();

        return $self;
    }

    public function content(): string
    {
        return <<<typescript
        // This file is auto generated by TypescriptableLaravel.
        const Routes: Record<App.Route.Name, App.Route.Entity> = {
        {$this->typescript},
        }

        declare global {
          interface Window {
            Routes: Record<App.Route.Name, App.Route.Entity>
          }
        }

        if (typeof window !== undefined && typeof window.Routes !== undefined)
          window.Routes = Routes

        export { Routes }

        typescript;
    }

    private function setTypescript(): string
    {
        $list = $this->routes->map(function (TypeRoute $route) {
            $params = collect($route->parameters())
                ->map(fn (TypeRouteParam $param) => "{$param->name()}: 'string',");

            if ($params->isEmpty()) {
                $params = 'params: undefined';
            } else {
                $params = $params->join(' ');
                $params = <<<typescript
                    params: {
                          {$params}
                        }
                    typescript;
            }

            return <<<typescript
            '{$route->name()}': {
              name: '{$route->name()}',
              path: '{$route->fullUri()}',
              {$params},
              method: '{$route->methods()[0]}',
            }
          typescript;
        });

        return $list->join(",\n");
    }
}
