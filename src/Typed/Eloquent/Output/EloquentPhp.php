<?php

namespace Kiwilan\Typescriptable\Typed\Eloquent\Output;

use Illuminate\Support\Facades\File;
use Kiwilan\Typescriptable\Typed\Eloquent\Utils\EloquentProperty;

class EloquentPhp
{
    /** @var array<string,string> */
    public array $content;

    protected function __construct(
        public string $path,
    ) {
    }

    /**
     * @param  array<string,EloquentProperty[]>  $eloquents
     */
    public static function make(array $eloquents, string $path): self
    {
        $self = new self($path);

        foreach ($eloquents as $model => $eloquent) {
            $content = [];

            $content[] = '<?php';
            $content[] = '';
            $content[] = 'namespace App\Types;';
            $content[] = '';
            $content[] = '// This file is auto generated by TypescriptableLaravel.';
            $content[] = "class {$model}";
            $content[] = '{';

            foreach ($eloquent as $property) {
                $type = $property->type;
                $isPrimitive = $self->isPrimitive($type);
                $type = $self->isClass($type) ? "\\{$type}" : $type;
                $type = $self->isDateTime($type) ? "\\{$type}" : $type;
                $type = $property->isNullable ? "?{$type}" : $type;

                $arrayType = $property->isArray ? '[]' : '';

                if (str_contains($type, '[]')) {
                    $type = str_replace('[]', '', $type);
                }
                $comment = $property->isArray ? '    /** @var '.$type.$arrayType.' */' : '';
                $type = $property->isArray ? 'array' : $type;

                $type = $self->isAdvancedArray($type) ? 'array' : $type;

                $content[] = "{$comment}".PHP_EOL."    public {$type} \${$property->name};";
            }

            $content[] = '};';
            $content[] = '';

            $self->content["{$model}.php"] = implode(PHP_EOL, $content);
        }

        return $self;
    }

    public function print(): void
    {
        foreach ($this->content as $name => $content) {
            $path = "{$this->path}/{$name}";
            File::put($path, $content);
        }
    }

    private function isAdvancedArray(string $type): bool
    {
        return strpos($type, '[]') !== false;
    }

    private function isClass(string $type): bool
    {
        return class_exists($type);
    }

    private function isDateTime(string $type): bool
    {
        return $type === 'DateTime' || $type === 'datetime';
    }

    private function isPrimitive(string $type): bool
    {
        return in_array($type, [
            'int',
            'float',
            'string',
            'bool',
            'array',
            'object',
            'callable',
            'iterable',
            'void',
            'null',
            'mixed',
        ]);
    }
}
