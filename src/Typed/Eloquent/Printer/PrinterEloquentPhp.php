<?php

namespace Kiwilan\Typescriptable\Typed\Eloquent\Printer;

use Illuminate\Support\Facades\File;
use Kiwilan\Typescriptable\Typed\Eloquent\Schemas\Model\SchemaModel;

class PrinterEloquentPhp
{
    /** @var array<string,string> */
    public array $content;

    protected function __construct(
        public string $path,
    ) {}

    /**
     * @param  SchemaModel[]  $models
     */
    public static function make(array $models, string $path): self
    {
        $self = new self($path);

        foreach ($models as $modelNamespace => $model) {
            $content = [];

            $content[] = '<?php';
            $content[] = '';
            $content[] = 'namespace App\Types;';
            $content[] = '';
            $content[] = '// This file is auto generated by TypescriptableLaravel.';
            $content[] = "class {$model->getSchemaClass()?->getFullname()}";
            $content[] = '{';

            // $count = count($eloquent);
            $i = 0;
            foreach ($model->getAttributes() as $attribute) {
                $type = $attribute->getPhpType();
                // handle advanced types
                if (str_contains($type, '[]')) {
                    $type = 'array';
                    $content[] = "    /** @var {$attribute->getPhpType()} */";
                }

                // handle `Attribute` type
                if (str_contains($type, 'Illuminate\\')) {
                    $type = "\\{$type}";
                }

                $content[] = "    public {$type} \${$attribute->getName()};\n";
            }

            foreach ($model->getRelations() as $relation) {
                if ($relation->isMany()) {
                    $type = "{$relation->getPhpType()}";

                    // handle package relations type
                    if (! $relation->isInternal()) {
                        $type = "\\{$type}";
                    }

                    $content[] = "    /** @var {$type} */";
                    $content[] = "    public array \${$relation->getName()};\n";
                } else {
                    $type = "{$relation->getPhpType()}";
                    if (! $relation->isInternal()) {
                        $type = "\\{$type}";
                    }
                    $content[] = "    public {$type} \${$relation->getName()};\n";
                }

            }

            $content[] = '}';
            $content[] = '';

            $self->content["{$model->getSchemaClass()?->getFullname()}.php"] = implode(PHP_EOL, $content);
        }

        return $self;
    }

    public function print(bool $delete = false): void
    {
        if (! File::exists($this->path)) {
            File::makeDirectory($this->path);
        }

        foreach ($this->content as $name => $content) {
            $path = "{$this->path}/{$name}";
            if ($delete) {
                File::delete($path);
            }

            File::put($path, $content);
        }
    }
}
