<?php

namespace Kiwilan\Typescriptable\Services\Types;

use Illuminate\Support\Facades\File;
use Kiwilan\Typescriptable\Services\Types\Models\ClassTemplate;
use Kiwilan\Typescriptable\Services\Types\Utils\LaravelPaginateType;
use Kiwilan\Typescriptable\Services\Types\Utils\LaravelTeamType;
use Kiwilan\Typescriptable\TypescriptableConfig;

/**
 * @property string $path
 * @property ClassTemplate[] $typeables
 */
class EloquentType
{
    protected function __construct(
        public string $path,
        /** @var ClassTemplate[] */
        public array $typeables = [],
    ) {
    }

    public static function make(): self
    {
        $path = TypescriptableConfig::modelsDirectory();

        $service = new EloquentType($path);
        $service->typeables = $service->setTypescriptables();

        if (TypescriptableConfig::modelsFakeTeam()) {
            $service->typeables['Team'] = ClassTemplate::fake('Team', LaravelTeamType::setFakeTeam());
        }

        $service->setTsModelTypes();
        // $service->setPhpModelTypes();

        return $service;
    }

    protected function setPhpModelTypes()
    {
        foreach ($this->typeables as $name => $typescriptable) {
            unset($typescriptable->reflector);
            $path = app_path('Types');
            $path = TypescriptableConfig::setPath("{$name}.php");

            File::put($path, $typescriptable->typeableModel->phpString);
        }
    }

    protected function setTsModelTypes()
    {
        $content = [];

        $content[] = '// This file is auto generated by TypescriptableLaravel.';
        $content[] = 'declare namespace App {';
        $content[] = '  declare namespace Models {';

        foreach ($this->typeables as $typescriptable) {
            $content[] = "    {$typescriptable->typeableModel->tsString}";
        }
        $content[] = '  }';

        if (TypescriptableConfig::modelsPaginate()) {
            $content[] = LaravelPaginateType::make();
        }
        $content[] = '}';

        $content = implode(PHP_EOL, $content);

        $filename = TypescriptableConfig::modelsFilename();

        $path = TypescriptableConfig::setPath($filename);
        File::put($path, $content);
    }

    /**
     * @return ClassTemplate[]
     */
    protected function setTypescriptables(): array
    {
        $classes = [];

        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($this->path, \FilesystemIterator::SKIP_DOTS)
        );

        /** @var \SplFileInfo $file */
        foreach ($iterator as $file) {
            if (! $file->isDir()) {
                $model = ClassTemplate::make(
                    path: $file->getPathname(),
                    file: $file,
                );
                $classes[$model->name] = $model;
            }
        }

        return $classes;
    }
}
