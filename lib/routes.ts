// This file is auto generated by TypescriptableLaravel.
const Routes: Record<App.Route.Name, App.Route.Link> = {
  'api/user': {
    name: 'api/user',
    path: '/api/user',
    params: undefined,
    methods: ['GET'],
  },
  'current-user-photo.destroy': {
    name: 'current-user-photo.destroy',
    path: '/user/profile-photo',
    params: undefined,
    methods: ['DELETE'],
  },
  'current-user.destroy': {
    name: 'current-user.destroy',
    path: '/user',
    params: undefined,
    methods: ['DELETE'],
  },
  'dashboard': {
    name: 'dashboard',
    path: '/dashboard',
    params: undefined,
    methods: ['GET'],
  },
  'download.show': {
    name: 'download.show',
    path: '/download/{podcast_slug}',
    params: {
      podcast_slug: 'string',
    },
    methods: ['GET'],
  },
  'feeds.index': {
    name: 'feeds.index',
    path: '/feeds',
    params: undefined,
    methods: ['GET'],
  },
  'feeds.show': {
    name: 'feeds.show',
    path: '/feeds/{feed_slug}',
    params: {
      feed_slug: 'string',
    },
    methods: ['GET'],
  },
  'home': {
    name: 'home',
    path: '/',
    params: undefined,
    methods: ['GET'],
  },
  'login': {
    name: 'login',
    path: '/login',
    params: undefined,
    methods: ['POST'],
  },
  'logout': {
    name: 'logout',
    path: '/logout',
    params: undefined,
    methods: ['POST'],
  },
  'other-browser-sessions.destroy': {
    name: 'other-browser-sessions.destroy',
    path: '/user/other-browser-sessions',
    params: undefined,
    methods: ['DELETE'],
  },
  'page.about': {
    name: 'page.about',
    path: '/a-propos',
    params: undefined,
    methods: ['GET'],
  },
  'page.p1pdd': {
    name: 'page.p1pdd',
    path: '/p1pdd',
    params: undefined,
    methods: ['GET'],
  },
  'page.pqd2p': {
    name: 'page.pqd2p',
    path: '/pqd2p',
    params: undefined,
    methods: ['GET'],
  },
  'page.subscribe': {
    name: 'page.subscribe',
    path: '/s-abonner',
    params: undefined,
    methods: ['GET'],
  },
  'password.confirm': {
    name: 'password.confirm',
    path: '/user/confirm-password',
    params: undefined,
    methods: ['POST'],
  },
  'password.confirmation': {
    name: 'password.confirmation',
    path: '/user/confirmed-password-status',
    params: undefined,
    methods: ['GET'],
  },
  'password.email': {
    name: 'password.email',
    path: '/forgot-password',
    params: undefined,
    methods: ['POST'],
  },
  'password.request': {
    name: 'password.request',
    path: '/forgot-password',
    params: undefined,
    methods: ['GET'],
  },
  'password.reset': {
    name: 'password.reset',
    path: '/reset-password/{token}',
    params: {
      token: 'string',
    },
    methods: ['GET'],
  },
  'password.update': {
    name: 'password.update',
    path: '/reset-password',
    params: undefined,
    methods: ['POST'],
  },
  'podcasts.index': {
    name: 'podcasts.index',
    path: '/podcasts',
    params: undefined,
    methods: ['GET'],
  },
  'podcasts.show': {
    name: 'podcasts.show',
    path: '/podcasts/{podcast_slug}',
    params: {
      podcast_slug: 'string',
    },
    methods: ['GET'],
  },
  'posts.index': {
    name: 'posts.index',
    path: '/blog',
    params: undefined,
    methods: ['GET'],
  },
  'posts.show': {
    name: 'posts.show',
    path: '/blog/{post_slug}',
    params: {
      post_slug: 'string',
    },
    methods: ['GET'],
  },
  'profile.show': {
    name: 'profile.show',
    path: '/user/profile',
    params: undefined,
    methods: ['GET'],
  },
  'rss.index': {
    name: 'rss.index',
    path: '/rss',
    params: undefined,
    methods: ['GET'],
  },
  'rss.show': {
    name: 'rss.show',
    path: '/rss/{feed_slug}',
    params: {
      feed_slug: 'string',
    },
    methods: ['GET'],
  },
  'sanctum.csrf-cookie': {
    name: 'sanctum.csrf-cookie',
    path: '/sanctum/csrf-cookie',
    params: undefined,
    methods: ['GET'],
  },
  'submission.index': {
    name: 'submission.index',
    path: '/contact',
    params: undefined,
    methods: ['GET'],
  },
  'submission.store': {
    name: 'submission.store',
    path: '/contact',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor-challenge': {
    name: 'two-factor-challenge',
    path: '/two-factor-challenge',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.confirm': {
    name: 'two-factor.confirm',
    path: '/user/confirmed-two-factor-authentication',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.disable': {
    name: 'two-factor.disable',
    path: '/user/two-factor-authentication',
    params: undefined,
    methods: ['DELETE'],
  },
  'two-factor.enable': {
    name: 'two-factor.enable',
    path: '/user/two-factor-authentication',
    params: undefined,
    methods: ['POST'],
  },
  'two-factor.login': {
    name: 'two-factor.login',
    path: '/two-factor-challenge',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor.qr-code': {
    name: 'two-factor.qr-code',
    path: '/user/two-factor-qr-code',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor.recovery-codes': {
    name: 'two-factor.recovery-codes',
    path: '/user/two-factor-recovery-codes',
    params: undefined,
    methods: ['GET'],
  },
  'two-factor.secret-key': {
    name: 'two-factor.secret-key',
    path: '/user/two-factor-secret-key',
    params: undefined,
    methods: ['GET'],
  },
  'user-password.update': {
    name: 'user-password.update',
    path: '/user/password',
    params: undefined,
    methods: ['PUT'],
  },
  'user-profile-information.update': {
    name: 'user-profile-information.update',
    path: '/user/profile-information',
    params: undefined,
    methods: ['PUT'],
  },
  'user/confirm-password': {
    name: 'user/confirm-password',
    path: '/user/confirm-password',
    params: undefined,
    methods: ['GET'],
  },
  'user/two-factor-recovery-codes': {
    name: 'user/two-factor-recovery-codes',
    path: '/user/two-factor-recovery-codes',
    params: undefined,
    methods: ['POST'],
  },
}

declare global {
  interface Window {
    Routes: Record<App.Route.Name, App.Route.Link>
  }
}

if (typeof window !== 'undefined') {
  if (typeof window !== undefined && typeof window.Routes !== undefined)
    window.Routes = Routes
}

export { Routes }
